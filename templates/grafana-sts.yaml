apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: observa
  labels:
    app: grafana
spec:
  podManagementPolicy: OrderedReady
  serviceName: grafana
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: {{ .Values.grafana.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: {{ .Values.grafana.cpuReq }}
              memory: {{ .Values.grafana.memReq }}
            limits:
              cpu: {{ .Values.grafana.cpuLim }}
              memory: {{ .Values.grafana.memLim }}
          env:
            - name: GF_LOG_LEVEL
              value: error
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: data
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
            - mountPath: /etc/grafana/provisioning/dashboards
              name: grafana-dashboard-providers
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-dashboards
            - name: timezone
              mountPath: /etc/localtime
      restartPolicy: Always
      terminationGracePeriodSeconds: 70
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: timezone
        hostPath:
          path: /etc/localtime
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.grafana.storage }}